// Code generated by MockGen. DO NOT EDIT.
// Source: ./phone.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	value "github.com/rodrigodev/jumia-go/src/internal/phone/value"
)

// MockPhoneServiceContainer is a mock of PhoneServiceContainer interface.
type MockPhoneServiceContainer struct {
	ctrl     *gomock.Controller
	recorder *MockPhoneServiceContainerMockRecorder
}

// MockPhoneServiceContainerMockRecorder is the mock recorder for MockPhoneServiceContainer.
type MockPhoneServiceContainerMockRecorder struct {
	mock *MockPhoneServiceContainer
}

// NewMockPhoneServiceContainer creates a new mock instance.
func NewMockPhoneServiceContainer(ctrl *gomock.Controller) *MockPhoneServiceContainer {
	mock := &MockPhoneServiceContainer{ctrl: ctrl}
	mock.recorder = &MockPhoneServiceContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhoneServiceContainer) EXPECT() *MockPhoneServiceContainerMockRecorder {
	return m.recorder
}

// GetPhones mocks base method.
func (m *MockPhoneServiceContainer) GetPhones(ctx context.Context) ([]value.Phone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhones", ctx)
	ret0, _ := ret[0].([]value.Phone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhones indicates an expected call of GetPhones.
func (mr *MockPhoneServiceContainerMockRecorder) GetPhones(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhones", reflect.TypeOf((*MockPhoneServiceContainer)(nil).GetPhones), ctx)
}
